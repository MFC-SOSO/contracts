/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVAMM,
  IVAMMInterface,
} from "../../../contracts/interfaces/IVAMM";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolFees",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shareOwnerFees",
        type: "uint256",
      },
    ],
    name: "CollectFees",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Trade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMarketPrice",
        type: "uint256",
      },
    ],
    name: "UpdateMarketPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldProtocolFeeStore",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newProtocolFeeStore",
        type: "address",
      },
    ],
    name: "UpdateProtocolFeeStore",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldShareFeeStore",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newShareFeeStore",
        type: "address",
      },
    ],
    name: "UpdateShareFeeStore",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxPayAmount",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "bytes",
        name: "protocolFeeData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "shareFeeData",
        type: "bytes",
      },
    ],
    name: "aggregateMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "brunAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minReceiveAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "protocolFeeData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "shareFeeData",
        type: "bytes",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareId",
        type: "address",
      },
    ],
    name: "getShareFeeStore",
    outputs: [
      {
        internalType: "contract ISharesFeeStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxPayAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "protocolFeeData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "shareFeeData",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareId",
        type: "address",
      },
      {
        internalType: "contract ISharesFeeStore",
        name: "",
        type: "address",
      },
    ],
    name: "shareInitialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawProtocolFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareId",
        type: "address",
      },
    ],
    name: "withdrawShareFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVAMM__factory {
  static readonly abi = _abi;
  static createInterface(): IVAMMInterface {
    return new utils.Interface(_abi) as IVAMMInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IVAMM {
    return new Contract(address, _abi, signerOrProvider) as IVAMM;
  }
}
